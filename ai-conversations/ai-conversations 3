----------------------------------
Tool: ChatGPT
Date: 2025-10-19
----------------------------------

Topic: Writing pseudocode for natural language and option-based weather questions

Me: I want my program to let users ask questions like “Will it rain tomorrow in Perth?” but also have a few ready-made questions to choose from. How can I do that?

AI: You can handle both. First, create a function to interpret natural questions. It should detect:
- The weather element (temperature, rain, or wind)
- The time reference (today, tomorrow, or day after tomorrow)
- The city name (after “in” or “at”)

Me: That sounds good. I’ll call it `parse_weather_question()`. Can you outline the logic?

AI: Sure, here’s a pseudocode plan:

1. Convert the question to lowercase.  
2. Look for keywords — “temperature”, “rain”, “wind”.  
3. Identify “today”, “tomorrow”, or “day after tomorrow”.  
4. Extract the city name after “in” or “at”.  
5. Return `{city, element, period}` as a dictionary.

Me: Perfect. I also want to give users a list of pre-made questions to choose from, like “What is the temperature today?” or “How windy will it be tomorrow?”. That way, they can select an option instead of typing everything.

AI: That’s a great idea. You can store the common questions in a list and print them as numbered options. Then, use `pyinputplus.inputInt()` to let users select one, and feed that text into the same parser function.

Me: Got it. I’ll include around 10 to 12 sample questions and make it flexible so both typed and pre-selected questions use the same logic.

AI: That’s a solid design. It keeps your code consistent and user-friendly.

Summary:
This discussion guided the development of the `parse_weather_question()` function and the addition of a numbered question list for user convenience. The feature allowed Weather Wise to handle both typed and predefined weather queries effectively.
